from aiogram import F, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from ..loader import dp

from ..states import RegState


async def start_registration(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(RegState.fio)

@dp.message(RegState.fio)
async def enter_group_number(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
    await state.set_state(RegState.group_number)

@dp.message(RegState.group_number)
async def enter_special(message: Message, state: FSMContext):
    await state.update_data(group_number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    await state.set_state(RegState.special_study)


@dp.message(RegState.special_study)
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(special_study=message.text)
    data = await state.get_data()

    kb = [
        [types.KeyboardButton(text="–î–∞")],
        [types.KeyboardButton(text="–ù–µ—Ç")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    await message.answer(
        f"<b>–°–ø–∞—Å–∏–±–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –û–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤–æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö!</b>\n"
        f"<b>–§–∏–æ:</b> {data['fio']}\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {data['group_number']}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:</b> {data['special_study']}\n"
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ?</b>",
        reply_markup=keyboard
    )
    await state.set_state(RegState.currect_info)



@dp.message(RegState.currect_info, F.text.casefold() == "–¥–∞")
async def Check_info_yes(message: Message, state: FSMContext):
    await message.reply("<b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ! üòä</b>", reply_markup=types.ReplyKeyboardRemove())
    # –°–î–ï–õ–ê–¢–¨ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î
    await state.clear()
@dp.message(RegState.currect_info, F.text.casefold() == "–Ω–µ—Ç")
async def Check_info_no(message: Message, state: FSMContext):
    await state.clear()
    await message.reply("–ó–∞–ø–æ–ª–Ω–∏–º —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ....", reply_markup=types.ReplyKeyboardRemove())
    await start_registration(message, state)